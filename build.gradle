apply plugin: 'java'
apply plugin: 'jacoco'

group = "amosalexa"
version = '1.0'

def coverageSourceDirs = [
        'src/main/java'
]

compileJava {
    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
    }
}
/*
test {
        java {
            srcDirs = ["src/test/java"]
        }
    }
*/
repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'https://repo.spring.io/libs-snapshot'
    }
}

dependencies {
    compile group: 'com.amazon.alexa', name: 'ask-sdk', version: '2.17.2'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-ses', version: '1.11.553'

    compile 'com.amazonaws:aws-lambda-java-core:1.0.0'
    compile 'com.amazonaws:aws-java-sdk-dynamodb:1.11.150'
    compile 'com.amazonaws:aws-java-sdk-code-generator:1.11.150'

    compile 'log4j:log4j:1.2.17'
    compile 'org.slf4j:slf4j-api:1.7.10'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.directory.studio:org.apache.commons.io:2.4'
    compile 'org.eclipse.jetty:jetty-server:9.0.6.v20130930'
    compile 'org.eclipse.jetty:jetty-servlet:9.0.6.v20130930'

    compile 'com.squareup.okhttp3:okhttp:3.8.0'
    compile 'com.google.code.gson:gson:2.8.0'

    compile group: 'org.json', name: 'json', version: '20090211'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    compile group: 'joda-time', name: 'joda-time', version: '2.9.4'

    compile 'se.walkercrou:google-places-api-java:2.1.7'
    compile 'com.google.maps:google-maps-services:0.1.20'

    compile 'org.springframework.hateoas:spring-hateoas:0.24.0.BUILD-SNAPSHOT'
    compile 'org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE'
    compile 'com.jayway.jsonpath:json-path:2.2.0'

    compile 'org.jtwig:jtwig-core:5.85.3.RELEASE'
    compile 'org.reflections:reflections:0.9.10'

    testCompile 'junit:junit:4.12'
}

task fatJar(type: Jar) {
    baseName = project.name + '-fat'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task buildZip(type: Zip) {
    baseName = project.name + '-fat'
    from compileJava
    from processResources
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    into('lib') {
        from configurations.runtime
    }
}

allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test) {
        systemProperty "file.encoding", "UTF-8"
    }
}

task simpleTests(type: Test) {
    outputs.upToDateWhen { false }
    useJUnit {
        excludeCategories 'amosalexa.AmosAlexaExtendedTest'
    }
}

task extendedTests(type: Test) {
    outputs.upToDateWhen { false }
    useJUnit {
        excludeCategories 'amosalexa.AmosAlexaSimpleTest'
    }
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

//Can be made dependent on successfull mytest task (if desired)
//task testReport(type: JacocoReport, dependsOn: "mytest") {

task testReport(type: JacocoReport) {
    String s = "${buildDir}"
    //System.out.println("buildDir: " + s)

    group = "Reporting"
    description = "Generate Jacoco code coverage report after running tests."
    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
        xml.destination "$buildDir/reports/jacoco/report.xml"
    }

    classDirectories = fileTree(dir: './build/classes/')
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("${project.buildDir}/jacoco/simpleTests.exec")
}

task testReportAll(type: JacocoReport) {
    String s = "${buildDir}"
    //System.out.println("buildDir: " + s)

    group = "Reporting"
    description = "Generate Jacoco code coverage report after running tests."
    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
        xml.destination "$buildDir/reports/jacoco/report.xml"
    }

    classDirectories = fileTree(dir: './build/classes/')
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("${project.buildDir}/jacoco/mytest.exec")
}

build.dependsOn fatJar
//build.dependsOn buildZip

// Testing since it is not possible to run mytest on mytest classes
task testDemo(type: Test) {
    outputs.upToDateWhen { false }
    useJUnit {
        includeCategories 'api.'
    }
}
